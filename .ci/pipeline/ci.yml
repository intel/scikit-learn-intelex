#===============================================================================
# Copyright 2020 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#===============================================================================

trigger:
  branches:
    include:
    - main
    - rls/*
  paths:
    exclude:
    - requirements-doc.txt
    - doc/
    - .ci/pipeline/docs.yml
    - .github/Pull_Request_template.md

pr:
  branches:
    include:
    - main
    - rls/*
  paths:
    exclude:
    - requirements-doc.txt
    - doc/
    - .ci/pipeline/docs.yml
    - .github/Pull_Request_template.md

variables:
  PYTHON: 'python'
  ARGS: '1'
  SHELLOPTS: 'errexit:pipefail'

jobs:
- job: Lint
  pool:
    vmImage: 'ubuntu-22.04'
  steps:
  - script: |
      echo "##vso[task.setvariable variable=ISORT_VERSION]$(grep -zoP '(?<=isort\n    rev: ).*' .pre-commit-config.yaml)"
      echo "##vso[task.setvariable variable=BLACK_VERSION]$(grep -zoP '(?<=black\n    rev: ).*' .pre-commit-config.yaml)"
      echo "##vso[task.setvariable variable=PYTHON_LINT_VERSION]$(grep -oP -m 1 '(?<=python).*' .pre-commit-config.yaml)"
    displayName: 'Collect lint versions'
  - task: UsePythonVersion@0
    inputs:
      versionSpec: $(PYTHON_LINT_VERSION)
      addToPath: true
  - script: |
      python -m pip install --upgrade pip setuptools
      pip install isort==${ISORT_VERSION} black[jupyter]==${BLACK_VERSION}
      isort --profile black --check . && black --check .
    displayName: 'Linting'
- job: LinuxCondaRecipe
  dependsOn: Lint
  timeoutInMinutes: 120
  strategy:
    matrix:
      Python3.12:
        PYTHON_VERSION: '3.12'
        NUMPY_VERSION: '2.1'
  pool:
    vmImage: 'ubuntu-22.04'
  steps:
  - script: |
      conda config --add channels conda-forge
      conda config --set channel_priority strict
      conda update -y -q --all
    displayName: "Conda update"
  - script: |
      conda create -y -q -n build-env conda-build conda-verify
    displayName: "Conda create"
  - script: |
      . /usr/share/miniconda/etc/profile.d/conda.sh
      conda activate build-env
      conda build . --python $(PYTHON_VERSION) --numpy $(NUMPY_VERSION)
    displayName: "Conda build and test"
- job: WindowsCondaRecipe
  dependsOn: Lint
  timeoutInMinutes: 120
  strategy:
    matrix:
      Python3.12:
        PYTHON_VERSION: '3.12'
        NUMPY_VERSION: '2.1'
  pool:
    vmImage: 'windows-2022'
  steps:
  - powershell: Write-Host "##vso[task.prependpath]$env:CONDA\Scripts"
    displayName: Add conda to PATH
  - script: |
      conda config --add channels conda-forge
      conda config --set channel_priority strict
      conda update -y -q --all
    displayName: "Conda update"
  - script: |
      conda create -y -q -n build-env conda-build conda-verify
    displayName: "Conda create"
  - script: |
      call activate build-env
      conda build . --python $(PYTHON_VERSION) --numpy $(NUMPY_VERSION)
    displayName: "Conda build and test"
- job: LinuxCondaEnv
  dependsOn: Lint
  timeoutInMinutes: 120
  strategy:
    matrix:
      Python3.9_Sklearn1.0:
        PYTHON_VERSION: '3.9'
        SKLEARN_VERSION: '1.0'
      Python3.9_Sklearn1.1:
        PYTHON_VERSION: '3.9'
        SKLEARN_VERSION: '1.1'
      Python3.10_Sklearn1.2:
        PYTHON_VERSION: '3.10'
        SKLEARN_VERSION: '1.2'
      Python3.11_Sklearn1.3:
        PYTHON_VERSION: '3.11'
        SKLEARN_VERSION: '1.3'
      Python3.12_Sklearn1.4:
        PYTHON_VERSION: '3.12'
        SKLEARN_VERSION: '1.4'
      Python3.13_Sklearn1.5:
        PYTHON_VERSION: '3.13'
        SKLEARN_VERSION: '1.5'
  pool:
    vmImage: 'ubuntu-22.04'
  steps:
  - template: build-and-test-lnx.yml
- job: WindowsCondaEnv
  dependsOn: Lint
  timeoutInMinutes: 120
  strategy:
    matrix:
      Python3.9_Sklearn1.0:
        PYTHON_VERSION: '3.9'
        SKLEARN_VERSION: '1.0'
      Python3.9_Sklearn1.1:
        PYTHON_VERSION: '3.9'
        SKLEARN_VERSION: '1.1'
      Python3.10_Sklearn1.2:
        PYTHON_VERSION: '3.10'
        SKLEARN_VERSION: '1.2'
      Python3.11_Sklearn1.3:
        PYTHON_VERSION: '3.11'
        SKLEARN_VERSION: '1.3'
      Python3.12_Sklearn1.4:
        PYTHON_VERSION: '3.12'
        SKLEARN_VERSION: '1.4'
      Python3.13_Sklearn1.5:
        PYTHON_VERSION: '3.13'
        SKLEARN_VERSION: '1.5'
  pool:
    vmImage: 'windows-2022'
  steps:
  - template: build-and-test-win.yml
