# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

variables:
  COVERITY_TOOL_HOME: $(Agent.BuildDirectory)/cov-analysis
  D4P_VERSION: 2021.2
  DESCRIPTION: Test

trigger:
- dev/coverity

pool:
  vmImage: 'ubuntu-latest'

steps:
- script: |
    cd $(Agent.BuildDirectory)
    wget https://scan.coverity.com/download/linux64 --post-data "token=$(COVERITY_AUTHKEY)&project=daal4py" -O coverity_tool.tgz
    tar -xzvf coverity_tool.tgz
    mv cov-analysis-linux64* cov-analysis
  condition: ne(variables.CACHE_RESTORED, 'true')
  displayName: 'Install Coverity tool'
- script: |
    # $(COVERITY_TOOL_HOME)/bin/cov-configure --python
    cd $(Build.Repository.LocalPath)
    $(COVERITY_TOOL_HOME)/bin/cov-build --dir cov-int --no-command --fs-capture-search .
    zip -r daal4py.zip cov-int
  displayName: 'Perform Coverity scan'
- script: |
    curl --form token=$(COVERITY_AUTHKEY) \
      --form email=$(COVERITY_AUTHLOGIN) \
      --form file=@$(Build.Repository.LocalPath)/daal4py.zip \
      --form version="$(D4P_VERSION)" \
      --form description="$(DESCRIPTION)" \
      $(COVERITY_URL)
  displayName: 'Upload results of Coverity scan'
# - task: synopsys-coverity@1
#   inputs:
#     coverityService: 'coverity-connection'
#     projectName: 'daal4py'
#     streamName: 'daal4py'
#     coverityBuildDirectory: '$(Build.Repository.LocalPath)'
#     buildCommand: --no-command --fs-capture-search .
#   displayName: 'Coverity scan'
