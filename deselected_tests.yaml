#===============================================================================
# Copyright 2020 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#===============================================================================

# This file lists node ids (following pytest format) of scikit-learn tests
# that are to be deselected during the test discovery step.
#
# Deselection can be predicated on the version of scikit-learn used.
# Use - node_id cond, or - node_id cond1,cond2  where cond is OPver.
# Supported OPs are >=, <=, ==, !=, >, <
# For example,
#    - tests/test_isotonic.py::test_permutation_invariance >0.18,<=0.19
#  will exclude deselection in versions 0.18.1, and 0.18.2 only.

deselected_tests:
  # Array API support
  # sklearnex functional Array API support doesn't guaranty namespace consistency for the estimator's array attributes.
  - decomposition/tests/test_pca.py::test_pca_array_api_compliance[PCA(n_components=2,svd_solver='covariance_eigh')-check_array_api_input_and_values-array_api_strict-None-None]
  - decomposition/tests/test_pca.py::test_pca_array_api_compliance[PCA(n_components=2,svd_solver='covariance_eigh',whiten=True)-check_array_api_input_and_values-array_api_strict-None-None]
  - decomposition/tests/test_pca.py::test_pca_array_api_compliance[PCA(n_components=2,svd_solver='covariance_eigh')-check_array_api_get_precision-array_api_strict-None-None]
  - decomposition/tests/test_pca.py::test_pca_array_api_compliance[PCA(n_components=2,svd_solver='covariance_eigh',whiten=True)-check_array_api_get_precision-array_api_strict-None-None]
  - linear_model/tests/test_ridge.py::test_ridge_array_api_compliance[Ridge(solver='svd')-check_array_api_attributes-array_api_strict-None-None]
  - linear_model/tests/test_ridge.py::test_ridge_array_api_compliance[Ridge(solver='svd')-check_array_api_input_and_values-array_api_strict-None-None]
  # `train_test_split` inconsistency for Array API inputs.
  - model_selection/tests/test_split.py::test_array_api_train_test_split[True-None-array_api_strict-None-None]
  - model_selection/tests/test_split.py::test_array_api_train_test_split[True-stratify1-array_api_strict-None-None]
  - model_selection/tests/test_split.py::test_array_api_train_test_split[False-None-array_api_strict-None-None]
  # PCA. Array API functionally supported for all factorizations. power_iteration_normalizer=["LU", "QR"]
  - decomposition/tests/test_pca.py::test_array_api_error_and_warnings_on_unsupported_params
  # PCA. InvalidParameterError: The 'M' parameter of randomized_svd must be an instance of 'numpy.ndarray' or a sparse matrix.
  - decomposition/tests/test_pca.py::test_pca_array_api_compliance[PCA(n_components=2,power_iteration_normalizer='QR',random_state=0,svd_solver='randomized')-check_array_api_input_and_values-array_api_strict-None-None]
  - decomposition/tests/test_pca.py::test_pca_array_api_compliance[PCA(n_components=2,power_iteration_normalizer='QR',random_state=0,svd_solver='randomized')-check_array_api_get_precision-array_api_strict-None-None]
  # Ridge regression. Array API functionally supported for all solvers. Not raising error for non-svd solvers.
  - linear_model/tests/test_ridge.py::test_array_api_error_and_warnings_for_solver_parameter[array_api_strict]

  # 'kulsinski' distance was deprecated in scipy 1.11 but still marked as supported in scikit-learn < 1.3
  - neighbors/tests/test_neighbors.py::test_kneighbors_brute_backend[float64-kulsinski] <1.3
  - neighbors/tests/test_neighbors.py::test_radius_neighbors_brute_backend[kulsinski] <1.3

  # sklearnex PCA always chooses "covariance_eigh" solver instead of "full" when solver="auto"
  # resulting in solver assignment check failure for sklearn version >= 1.5
  - decomposition/tests/test_pca.py::test_pca_svd_solver_auto[1000-500-400-full] >=1.5
  - decomposition/tests/test_pca.py::test_pca_svd_solver_auto[1000-500-0.5-full] >=1.5

  # Non-critical, but there are significant differences due to different implementations
  - linear_model/tests/test_common.py::test_balance_property[42-True-LinearRegression]
  - neighbors/tests/test_lof.py::test_lof_dtype_equivalence[0.5-True-brute]
  - neighbors/tests/test_lof.py::test_lof_dtype_equivalence[auto-True-brute]

  # Same as above but for visual studio builds (previously a deselection for macOS)
  - neighbors/tests/test_lof.py::test_lof_dtype_equivalence[0.5-True-auto] >=1.2 win32
  - neighbors/tests/test_lof.py::test_lof_dtype_equivalence[0.5-True-ball_tree] >=1.2 win32
  - neighbors/tests/test_lof.py::test_lof_dtype_equivalence[0.5-True-kd_tree] >=1.2 win32
  - neighbors/tests/test_lof.py::test_lof_dtype_equivalence[auto-True-auto] >=1.2 win32
  - neighbors/tests/test_lof.py::test_lof_dtype_equivalence[auto-True-ball_tree] >=1.2 win32
  - neighbors/tests/test_lof.py::test_lof_dtype_equivalence[auto-True-kd_tree] >=1.2 win32

  # Sklearnex RandomForestClassifier RNG is different from scikit-learn and daal4py
  # resulting in different feature importances for small number of trees (10).
  # Issue dissappears with bigger number of trees (>=20)
  - inspection/tests/test_permutation_importance.py::test_permutation_importance_correlated_feature_regression_pandas[0.5-1]
  - inspection/tests/test_permutation_importance.py::test_permutation_importance_correlated_feature_regression_pandas[0.5-2]
  - inspection/tests/test_permutation_importance.py::test_permutation_importance_correlated_feature_regression_pandas[1.0-1]
  - inspection/tests/test_permutation_importance.py::test_permutation_importance_correlated_feature_regression_pandas[1.0-2]

  # TODO: add support of subset invariance to SVM
  - tests/test_common.py::test_estimators[SVC()-check_methods_subset_invariance]
  - tests/test_common.py::test_estimators[NuSVC()-check_methods_subset_invariance]
  - tests/test_common.py::test_estimators[SVR()-check_methods_subset_invariance]
  - tests/test_common.py::test_estimators[NuSVR()-check_methods_subset_invariance]

  # SVR.fit fails when input is two samples of one class
  - preprocessing/tests/test_data.py::test_cv_pipeline_precomputed

  # KDtree kNN rarely misses 0-distance points when kneighbors is used on same-fitting data
  - manifold/tests/test_spectral_embedding.py::test_precomputed_nearest_neighbors_filtering

  # Cache directory is not accessible on some systems
  - utils/tests/test_validation.py::test_check_memory

  # oneDAL doesn't throw error if resulting coeffs are not finite
  - linear_model/tests/test_coordinate_descent.py::test_enet_nonfinite_params
  - svm/tests/test_svm.py::test_svc_nonfinite_params

  # Different exception types in scikit-learn-intelex and scikit-learn
  - utils/tests/test_validation.py::test_check_array_links_to_imputer_doc_only_for_X[asarray-X]
  - utils/tests/test_validation.py::test_check_array_links_to_imputer_doc_only_for_X[csr_matrix-X]

  # TODO: investigate copy failure of read-only buffer
  - linear_model/tests/test_coordinate_descent.py::test_read_only_buffer

  # Difference between scikit-learn and scikit-learn-intelex methods of kNN
  - neighbors/tests/test_neighbors.py::test_unsupervised_kneighbors[float64-euclidean-True-1000-5-100-1]
  - neighbors/tests/test_neighbors.py::test_unsupervised_kneighbors[float64-minkowski-True-1000-5-100-1]
  - neighbors/tests/test_neighbors.py::test_unsupervised_kneighbors[float64-l2-True-1000-5-100-1]
  - neighbors/tests/test_neighbors.py::test_neigh_predictions_algorithm_agnosticity[float64-KNeighborsClassifier-1-100-euclidean-1000-5-100]
  - neighbors/tests/test_neighbors.py::test_neigh_predictions_algorithm_agnosticity[float64-KNeighborsClassifier-1-100-minkowski-1000-5-100]
  - neighbors/tests/test_neighbors.py::test_neigh_predictions_algorithm_agnosticity[float64-KNeighborsRegressor-1-100-euclidean-1000-5-100]
  - neighbors/tests/test_neighbors.py::test_neigh_predictions_algorithm_agnosticity[float64-KNeighborsRegressor-1-100-minkowski-1000-5-100]
  - neighbors/tests/test_neighbors.py::test_neigh_predictions_algorithm_agnosticity[float64-KNeighborsClassifier-1-100-l2-1000-5-100]
  - neighbors/tests/test_neighbors.py::test_neigh_predictions_algorithm_agnosticity[float64-KNeighborsRegressor-1-100-l2-1000-5-100]
  - neighbors/tests/test_neighbors.py::test_KNeighborsClassifier_multioutput

  # Models with sparse data are different between oneAPI Data Analytics Library (oneDAL) and stock scikit-learn
  - svm/tests/test_sparse.py::test_svc
  - svm/tests/test_sparse.py::test_svc_iris
  - svm/tests/test_sparse.py::test_sparse_realdata

  # Decision function is different, 1.83697605e-06
  - ensemble/tests/test_bagging.py::test_sparse_classification

  # Same results as in scikit-learn, but in a different order
  - svm/tests/test_svm.py::test_svc_ovr_tie_breaking[SVC]
  - svm/tests/test_svm.py::test_svc_ovr_tie_breaking[NuSVC]

  # Different models between oneAPI Data Analytics Library (oneDAL) and stock scikit-learn with custom and precompute kernel
  - svm/tests/test_svm.py::test_svc_clone_with_callable_kernel
  - svm/tests/test_svm.py::test_precomputed

  # scikit-learn expects an exception for sparse matrices with 64-bit integer indices,
  # scikit-learn-intelex works correctly with 64-bit integer indices
  - tests/test_common.py::test_estimators[NuSVC()-check_estimator_sparse_data]
  - tests/test_common.py::test_estimators[NuSVC()-check_estimator_sparse_array]
  - tests/test_common.py::test_estimators[NuSVC()-check_estimator_sparse_matrix]
  - utils/tests/test_estimator_checks.py::test_xfail_ignored_in_check_estimator

  # SVC._dual_coef_ is changing after fitting, but the result of prediction is still the same
  - svm/tests/test_svm.py::test_tweak_params

  # Bitwise comparison of SVR score using a print (diff = 2.220446049250313e-16)
  - svm/tests/test_svm.py::test_custom_kernel_not_array_input[SVR]

  # test_non_uniform_strategies fails due to differences in handling of vacuous clusters after update
  # See https://github.com/IntelPython/daal4py/issues/69
  - cluster/tests/test_k_means.py::test_kmeans_relocated_clusters >=0.24

  # oneAPI Data Analytics Library (oneDAL) does not check convergence for tol == 0.0 for ease of benchmarking
  - cluster/tests/test_k_means.py::test_kmeans_convergence >=0.23
  - cluster/tests/test_k_means.py::test_kmeans_verbose >=0.23

  # Logistic Regression coeffs change due to fix for loss scaling
  # (https://github.com/scikit-learn/scikit-learn/pull/26721)
  - feature_selection/tests/test_from_model.py::test_importance_getter[estimator0-named_steps.logisticregression.coef_]
  - linear_model/tests/test_sag.py::test_sag_pobj_matches_logistic_regression

  # This fails on certain platforms. While weighted data does not go through DAAL,
  # unweighted does. Since convergence does not occur (comment in the test
  # suggests that) and because coefficients are slightly different,
  # it results in a prediction disagreement in 1 case.
  - ensemble/tests/test_stacking.py::test_stacking_with_sample_weight[StackingClassifier]

  # Insufficient accuracy of "coefs" and "intercept" in Elastic Net for multi-target problems
  # https://github.com/uxlfoundation/oneDAL/issues/494
  - linear_model/tests/test_coordinate_descent.py::test_enet_multitarget

  # oneAPI Data Analytics Library (oneDAL) doesn't support sample_weight (back to scikit-learn),
  # sufficient accuracy (similar to previous cases)
  - linear_model/tests/test_coordinate_descent.py::test_enet_sample_weight_consistency >=0.23

  # Different interpretation of trees compared to scikit-learn
  # Looks like we need to align tree traversal. This problem will be fixed
  - ensemble/tests/test_forest.py::test_min_samples_leaf
  # Different random number generation engine in oneDAL and scikit-learn
  # The result is depend on random state, for random_state=777 in RandomForestClassifier the test is passed
  - ensemble/tests/test_voting.py::test_majority_label_iris

  # scikit-learn-intelex RF threads are used internally and are not explicitly specified
  - ensemble/tests/test_forest.py::test_backend_respected

  # scikit-learn-intelex does not support accessing trees through the result variable
  - ensemble/tests/test_forest.py::test_warm_start
  - inspection/tests/test_partial_dependence.py::test_recursion_decision_tree_vs_forest_and_gbdt[0] >=0.23

  # scikit-learn-intelex implementation builds different trees compared to scikit-learn
  # Comparison of tree forest will fail
  - ensemble/tests/test_forest.py::test_class_weights
  - ensemble/tests/test_forest.py::test_poisson_vs_mse
  - inspection/tests/test_permutation_importance.py::test_robustness_to_high_cardinality_noisy_feature >=0.23
  - tests/test_common.py::test_estimators[SVC()-check_sample_weights_invariance(kind=zeros)] <1.0
  - tests/test_common.py::test_estimators[SVR()-check_sample_weights_invariance(kind=zeros)] <1.0
  - tests/test_common.py::test_estimators[NuSVC()-check_sample_weights_invariance(kind=zeros)] <1.0
  - tests/test_common.py::test_estimators[NuSVR()-check_sample_weights_invariance(kind=zeros)] <1.0
  - tests/test_common.py::test_estimators[NuSVC()-check_class_weight_classifiers] <1.0
  - tests/test_multioutput.py::test_multi_output_classification

  # Linear Regression - minor mismatches in error/warning messages
  - linear_model/tests/test_base.py::test_linear_regression_pd_sparse_dataframe_warning

  # L1 Linear models with sklearn 1.1 + numpy > 1.25 - extra warnings from numpy lead to test fail
  - linear_model/tests/test_coordinate_descent.py::test_assure_warning_when_normalize[True-1-LassoCV] >=1.1,<1.2
  - linear_model/tests/test_coordinate_descent.py::test_assure_warning_when_normalize[True-1-ElasticNetCV] >=1.1,<1.2
  - linear_model/tests/test_coordinate_descent.py::test_assure_warning_when_normalize[False-1-LassoCV] >=1.1,<1.2
  - linear_model/tests/test_coordinate_descent.py::test_assure_warning_when_normalize[False-1-ElasticNetCV] >=1.1,<1.2
  - linear_model/tests/test_coordinate_descent.py::test_assure_warning_when_normalize[deprecated-0-LassoCV] >=1.1,<1.2
  - linear_model/tests/test_coordinate_descent.py::test_assure_warning_when_normalize[deprecated-0-ElasticNetCV] >=1.1,<1.2

  # OOB scores in scikit-learn and oneDAL are different because of different random number generators
  - ensemble/tests/test_forest.py::test_forest_regressor_oob[True-X0-y0-0.7-array-ExtraTreesRegressor] >=1.3
  - ensemble/tests/test_forest.py::test_importances[ExtraTreesRegressor-squared_error-float64] >=0.23 darwin
  - ensemble/tests/test_forest.py::test_forest_regressor_oob[X0-y0-0.7-array-ExtraTreesRegressor]
  - ensemble/tests/test_forest.py::test_warm_start_oob
  - ensemble/tests/test_forest.py::test_distribution

  # Different behavior when 1 class enters the input
  - feature_selection/tests/test_rfe.py::test_rfe_cv_groups

  # few-percent numerical differences in ExtraTreesRegressor, but 6 digits are checked
  - ensemble/tests/test_forest.py::test_memory_layout[float64-ExtraTreesRegressor]
  - ensemble/tests/test_forest.py::test_memory_layout[float32-ExtraTreesRegressor]

  # module name should starts with 'sklearn.' but we have 'daal4py.sklearn.'
  - metrics/tests/test_score_objects.py::test_scoring_is_not_metric
  - utils/tests/test_estimator_checks.py::test_check_dataframe_column_names_consistency >=1.0

  # Stability issue with max absolute difference: 4.33846826e-08/1.17613697e-11. Remove in next release
  - ensemble/tests/test_bagging.py::test_estimators_samples_deterministic

  # Some values in PCA.components_ (in the last component) aren't equal (0.6 on average
  # for absolute error in this test) because of different implementations of PCA.
  # The results are also not stable.
  - decomposition/tests/test_incremental_pca.py::test_whitening

  # The test fails because of changing of 'auto' strategy in PCA to improve performance.
  # 'randomized' PCA expected, but 'full' is given.
  - decomposition/tests/test_pca.py::test_pca_svd_solver_auto[data3-10-randomized]

  # Scikit-learn logistic regression predict depends from decision_function while d4p is not.
  # Assertion error in check_estimator (PoorScoreLogisticRegression())
  - utils/tests/test_estimator_checks.py::test_check_estimator >=0.24

  # RandomForestRegressor sum(y_pred)!=sum(y_true)
  - ensemble/tests/test_forest.py::test_balance_property_random_forest[squared_error] >=1.0

  # This test fails because with patch config_context with new options, but the
  # test checks only the exact number of options that are used
  - tests/test_config.py::test_config_context


  # Accuracy of scikit-learn-intelex and scikit-learn may differ due to different approaches
  - manifold/tests/test_t_sne.py::test_bh_match_exact
  - manifold/tests/test_t_sne.py::test_uniform_grid[barnes_hut]

  # Failure related to incompatibility of older sklearn versions with updated dependencies
  - utils/tests/test_validation.py::test_check_array_pandas_dtype_casting >=1.0,<1.2
  - utils/tests/test_validation.py::test_check_sparse_pandas_sp_format <1.2

  # Failure due to non-uniformity in the MT2203 engine causing
  # bad Random Forest fits for small datasets with large n_estimators
  # Had been solved by using MT19937, but oneDAL forces use of MT2203
  - tests/test_multioutput.py::test_classifier_chain_tuple_order

  # oneDAL decision forest trains individual trees differently than
  # sklearn. Attempts to compare individual sklearn trees to oneDAL
  # trees will fail, especially since two different RNGs are used.
  - ensemble/tests/test_forest.py::test_estimators_samples

  # Tests migrated from gpu deselection set starting from sklearn 1.4 for unknowm reason(s)
  - ensemble/tests/test_bagging.py::test_estimators_samples >=1.4
  - ensemble/tests/test_voting.py::test_sample_weight >=1.4
  - svm/tests/test_svm.py::test_auto_weight >=1.4
  - tests/test_calibration.py::test_calibrated_classifier_cv_double_sample_weights_equivalence >=1.4
  - tests/test_calibration.py::test_calibrated_classifier_cv_zeros_sample_weights_equivalence >=1.4
  - tests/test_common.py::test_estimators[LogisticRegression()-check_sample_weights_invariance(kind=ones)] >=1.4
  - tests/test_common.py::test_estimators[LogisticRegression()-check_sample_weights_invariance(kind=zeros)] >=1.4
  - tests/test_multioutput.py::test_classifier_chain_fit_and_predict_with_sparse_data >=1.4

  # Deselected tests for incremental algorithms
  # Need to rework getting policy to correctly obtain it for method without data (finalize_fit)
  # and avoid keeping it in class attribute, also need to investigate how to implement
  # partial result serialization
  - tests/test_common.py::test_estimators[IncrementalLinearRegression()-check_estimators_pickle]
  - tests/test_common.py::test_estimators[IncrementalLinearRegression()-check_estimators_pickle(readonly_memmap=True)]
  - tests/test_common.py::test_estimators[IncrementalRidge()-check_estimators_pickle]
  - tests/test_common.py::test_estimators[IncrementalRidge()-check_estimators_pickle(readonly_memmap=True)]
  # There are not enough data to run onedal backend
  - tests/test_common.py::test_estimators[IncrementalLinearRegression()-check_fit2d_1sample]
  - tests/test_common.py::test_estimators[IncrementalRidge()-check_fit2d_1sample]

  # Deselection of LogisticRegression tests over accuracy comparisons with sample_weights
  # and without.  Because scikit-learn-intelex does not support sample_weights, it's doing
  # a fallback to scikit-learn in one case and not in the other, and needs to be investigated.
  - model_selection/tests/test_classification_threshold.py::test_fit_and_score_over_thresholds_sample_weight >=1.5
  - model_selection/tests/test_classification_threshold.py::test_tuned_threshold_classifier_cv_zeros_sample_weights_equivalence >=1.5

  # Deselections for 2025.0
  - ensemble/tests/test_forest.py::test_importances[ExtraTreesRegressor-squared_error-float64]
  - cluster/tests/test_k_means.py::test_kmeans_elkan_results

  # Fails in stock scikit-learn: checks that data is modified in-place when not strictly required
  - linear_model/tests/test_base.py::test_inplace_data_preprocessing

  # Failure occurs in python3.9 on windows CPU only - not easy to reproduce
  - ensemble/tests/test_weight_boosting.py::test_estimator >= 1.4 win32

  # --------------------------------------------------------
  # No need to test daal4py patching
reduced_tests:
  - cluster/tests/test_affinity_propagation.py
  - cluster/tests/test_bicluster.py
  - cluster/tests/test_birch.py
  - cluster/tests/test_mean_shift.py
  - cluster/tests/test_optics.py

  - compose/tests/test_column_transformer.py

  - decomposition/tests/test_dict_learning.py
  - decomposition/tests/test_factor_analysis.py
  - decomposition/tests/test_nmf.py
  - decomposition/tests/test_online_lda.py

  - ensemble/tests/test_gradient_boosting.py
  - ensemble/tests/test_gradient_boosting_loss_functions.py
  - ensemble/tests/test_iforest.py

  - feature_selection/tests/test_chi2.py
  - feature_selection/tests/test_feature_select.py
  - feature_selection/tests/test_mutual_info.py
  - feature_selection/tests/test_sequential.py
  - feature_selection/tests/test_from_model.py

  - manifold/tests/test_isomap.py
  - manifold/tests/test_locally_linear.py
  - manifold/tests/test_spectral_embedding.py

  - model_selection/tests/test_successive_halving.py

  - neighbors/tests/test_ball_tree.py
  - neighbors/tests/test_kd_tree.py
  - neighbors/tests/test_quad_tree.py

  - tests/test_kernel_approximation.py
  - tests/test_docstring_parameters.py
  - tests/test_dummy.py
  - tests/test_random_projection.py
  - tests/test_naive_bayes.py

  - utils/tests/test_arpack.py
  - utils/tests/test_cython_blas.py
  - utils/tests/test_encode.py
  - utils/tests/test_estimator_html_repr.py
  - utils/tests/test_extmath.py
  - utils/tests/test_fast_dict.py
  - utils/tests/test_mocking.py
  - utils/tests/test_murmurhash.py
  - utils/tests/test_sparsefuncs.py
  - utils/tests/test_utils.py

  - _loss/
  - cross_decomposition/
  - datasets/
  - ensemble/_hist_gradient_boosting/
  - experimental/
  - feature_extraction/
  - gaussian_process/
  - impute/
  - inspection/
  - neural_network/
  - preprocessing/

public:
  - tests/test_common.py::test_estimators
  # Fails from numpy 2.0 and sklearn 1.4+
  - neighbors/tests/test_neighbors.py::test_KNeighborsClassifier_raise_on_all_zero_weights

  # --------------------------------------------------------
  # The following tests currently fail with GPU offloading
gpu:
  # Segfaults
  - ensemble/tests/test_weight_boosting.py
  # Fails
  - cluster/tests/test_dbscan.py::test_weighted_dbscan
  - cluster/tests/test_k_means.py::test_kmeans_elkan_results[42-1e-100-sparse-normal]
  - model_selection/tests/test_search.py::test_unsupervised_grid_search
  - ensemble/tests/test_bagging.py::test_estimators_samples
  - ensemble/tests/test_voting.py::test_sample_weight
  - metrics/tests/test_score_objects.py::test_average_precision_pos_label
  - model_selection/tests/test_search.py::test_search_default_iid
  - neighbors/tests/test_neighbors.py::test_unsupervised_kneighbors
  - neighbors/tests/test_neighbors.py::test_neighbors_metrics
  - svm/tests/test_sparse.py::test_svc
  - svm/tests/test_sparse.py::test_svc_iris
  - svm/tests/test_sparse.py::test_sparse_realdata
  - svm/tests/test_svm.py::test_precomputed
  - svm/tests/test_svm.py::test_tweak_params
  - svm/tests/test_svm.py::test_svm_classifier_sided_sample_weight[estimator0]
  - svm/tests/test_svm.py::test_svm_equivalence_sample_weight_C
  - svm/tests/test_svm.py::test_negative_weights_svc_leave_two_labels[partial-mask-label-1-SVC]
  - svm/tests/test_svm.py::test_negative_weights_svc_leave_two_labels[partial-mask-label-2-SVC]
  - svm/tests/test_svm.py::test_svc_clone_with_callable_kernel
  # sparse input is not implemented for DBSCAN.
  - tests/test_common.py::test_estimators[RandomForestClassifier()-check_class_weight_classifiers]
  - tests/test_common.py::test_estimators[SVC()-check_sample_weights_not_an_array]
  - tests/test_common.py::test_estimators[SVC()-check_classifier_data_not_an_array]
  - tests/test_common.py::test_search_cv[RandomizedSearchCV(estimator=LogisticRegression(),param_distributions={'C':[0.1,1.0]})-check_classifiers_classes]
  - tests/test_common.py::test_search_cv[RandomizedSearchCV(estimator=LogisticRegression(),param_distributions={'C':[0.1,1.0]})-check_decision_proba_consistency]
  - tests/test_multioutput.py::test_classifier_chain_fit_and_predict_with_sparse_data

  # Segmentation faults on GPU
  - tests/test_common.py::test_search_cv

  # Other device issues
  - tests/test_multioutput.py::test_classifier_chain_tuple_order[list]
  - tests/test_multioutput.py::test_classifier_chain_tuple_order[tuple]
  # KD Tree (not implemented for GPU)
  - neighbors/tests/test_neighbors.py::test_neigh_predictions_algorithm_agnosticity[float64-KNeighborsClassifier-50-500-l2-1000-5-100]
  - neighbors/tests/test_neighbors.py::test_neigh_predictions_algorithm_agnosticity[float64-KNeighborsClassifier-100-1000-l2-1000-5-100]
  - neighbors/tests/test_neighbors.py::test_neigh_predictions_algorithm_agnosticity[float64-KNeighborsRegressor-50-500-l2-1000-5-100]
  - neighbors/tests/test_neighbors.py::test_neigh_predictions_algorithm_agnosticity[float64-KNeighborsRegressor-100-1000-l2-1000-5-100]
  # failing due to numeric/code error
  - linear_model/tests/test_common.py::test_balance_property[42-False-LogisticRegressionCV]
  - sklearn/manifold/tests/test_t_sne.py::test_n_iter_without_progress
  - model_selection/tests/test_search.py::test_searchcv_raise_warning_with_non_finite_score[RandomizedSearchCV-specialized_params1-False]
  - model_selection/tests/test_search.py::test_searchcv_raise_warning_with_non_finite_score[RandomizedSearchCV-specialized_params1-True]
  - tests/test_calibration.py::test_calibrated_classifier_cv_double_sample_weights_equivalence
  - tests/test_calibration.py::test_calibrated_classifier_cv_zeros_sample_weights_equivalence
  - tests/test_common.py::test_estimators[FeatureAgglomeration()-check_parameters_default_constructible]
  - neighbors/tests/test_lof.py::test_novelty_true_common_tests[LocalOutlierFactor(novelty=True)-check_methods_subset_invariance]
  - tests/test_common.py::test_transformers_get_feature_names_out[StackingRegressor(estimators=[('est1',Ridge(alpha=0.1)),('est2',Ridge(alpha=1))])]
  - tests/test_common.py::test_transformers_get_feature_names_out[VotingRegressor(estimators=[('est1',Ridge(alpha=0.1)),('est2',Ridge(alpha=1))])]
  - tests/test_common.py::test_f_contiguous_array_estimator[TSNE]
  - manifold/tests/test_t_sne.py::test_tsne_works_with_pandas_output

  # GPU Forest algorithm implementation does not follow certain Scikit-learn standards
  - ensemble/tests/test_forest.py::test_max_leaf_nodes_max_depth
  - ensemble/tests/test_forest.py::test_min_samples_split[ExtraTreesClassifier]
  - ensemble/tests/test_forest.py::test_min_samples_split[RandomForestClassifier]
  - ensemble/tests/test_forest.py::test_min_samples_split[ExtraTreesRegressor]
  - ensemble/tests/test_forest.py::test_max_samples_boundary_regressors

  # numerical issues in GPU Forest algorithms which require further investigation
  - ensemble/tests/test_voting.py::test_predict_on_toy_problem[42]
  - tests/test_common.py::test_estimators[ExtraTreesClassifier()-check_class_weight_classifiers]
  - tests/test_common.py::test_estimators[ExtraTreesRegressor()-check_sample_weights_invariance(kind=zeros)]
  - tests/test_common.py::test_estimators[RandomForestRegressor()-check_regressor_data_not_an_array]
  - ensemble/tests/test_forest.py::test_max_samples_boundary_classifiers[ExtraTreesClassifier]
  - tests/test_common.py::test_estimators[ExtraTreesClassifier()-check_classifier_data_not_an_array]
  - tests/test_common.py::test_estimators[ExtraTreesClassifier()-check_classifiers_train]
  - tests/test_common.py::test_estimators[ExtraTreesClassifier()-check_classifiers_train(readonly_memmap=True)]
  - tests/test_common.py::test_estimators[ExtraTreesClassifier()-check_fit_idempotent]
  - tests/test_common.py::test_estimators[ExtraTreesRegressor()-check_fit_idempotent]
  - tests/test_common.py::test_estimators[ExtraTreesRegressor()-check_regressor_data_not_an_array]

  # GPU implementation of Extra Trees doesn't support sample_weights
  # comparisons to GPU with sample weights will use different algorithms
  - tests/test_common.py::test_estimators[ExtraTreesClassifier()-check_sample_weights_invariance(kind=ones)]
  - tests/test_common.py::test_estimators[ExtraTreesClassifier()-check_sample_weights_invariance(kind=zeros)]
  - tests/test_common.py::test_estimators[ExtraTreesRegressor()-check_sample_weights_invariance(kind=ones)]

  # RuntimeError: Device support is not implemented, failing as result of fallback to cpu false
  - svm/tests/test_svm.py::test_unfitted
  - tests/test_common.py::test_estimators[SVC()-check_estimators_unfitted]
